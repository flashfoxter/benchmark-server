{"ts":1354601419374,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1354601491169,"patch":[[{"diffs":[[1,"/*!\r\n* socket.io-node\r\n* Copyright(c) 2011 LearnBoost <dev@learnboost.com>\r\n* MIT Licensed\r\n*/\r\n\r\nmodule.exports = require('./lib/main');"]],"start1":0,"start2":0,"length1":0,"length2":137}]],"length":137,"saved":false}
{"ts":1354602162186,"patch":[[{"diffs":[[0,"\r\n* "],[-1,"socket.io-node"],[1,"benchmark-server"],[0,"\r\n* "]],"start1":3,"start2":3,"length1":22,"length2":24},{"diffs":[[0," 201"],[-1,"1 LearnBoost <dev@learnboost.com>\r\n* MIT Licensed"],[1,"2 Denny Lim <hello@iamdenny.com>"],[0,"\r\n*/"]],"start1":39,"start2":39,"length1":57,"length2":40}]],"length":122,"saved":false}
{"ts":1354603021421,"patch":[[{"diffs":[[0,"/*"],[-1,"!"],[1,"*"],[0,"\r\n"],[1," "],[0,"* "],[-1,"benchmark-server\r\n* Copyright(c) 2012 Denny Lim <hello@iamdenny.com>\r\n*/\r\n\r\nmodule.exports = require('./lib/main');"],[1,"Module dependencies.\r\n */\r\nvar express = require('express')\r\n  , routes = require('./routes')\r\n  , user = require('./routes/user')\r\n  , http = require('http')\r\n  , path = require('path')\r\n  , os = require('os')\r\n  , Fs = require('fs')\r\n  , Exec = require('child_process').exec;\r\n\r\nvar app = express();\r\n\r\nexports.listen = function(nPort){\r\n    app.configure(function(){\r\n        app.set('port', nPort || 15030);\r\n        app.set('views', __dirname + '/views');\r\n        app.set('view engine', 'jade');\r\n        app.use(express.favicon());\r\n        app.use(express.logger('dev'));\r\n        app.use(express.bodyParser());\r\n        app.use(express.methodOverride());\r\n        app.use(app.router);\r\n        app.use(express.static(path.join(__dirname, 'public')));\r\n    });\r\n    \r\n    app.configure('development', function(){\r\n        app.use(express.errorHandler());\r\n    });\r\n\r\n    app.get('/', routes.index);    \r\n    \r\n    var oHttp = http.createServer(app).listen(app.get('port'), function(){\r\n        console.log(\"Express server listening on port \" + app.get('port'));\r\n    });\r\n    \r\n    var SocketIo = require('socket.io');\r\n    oSocketIo = SocketIo.listen(oHttp);\r\n    \r\n    oSocketIo.set('log level', 1);\r\n    \r\n    oSocketIo.sockets.on('connection', function(oSocket){\r\n        console.log('connection');\r\n        oSocket.emit('pushServerInfo', getServerInfo());\r\n    \r\n    \r\n        setInterval(function(){\r\n            readStat(function(data){\r\n                var aTempData = data.split('\\n')[4];\r\n                // console.log(aTempData);\r\n                var aData = aTempData.split('    ');\r\n                // console.log(aData);\r\n                var nUser = Number(aData[3], 10);\r\n                var nSystem = Number(aData[5], 10);\r\n                var nNice = Number(aData[4], 10);\r\n                var nIdle = Number(aData[8], 10);\r\n                \r\n                var nTotalCpu = nUser + nSystem + nNice + nIdle,\r\n                    nUserCpuUsage = Math.round(nUser / nTotalCpu * 100 * 100) / 100,\r\n                    nSystemCpuUsage = Math.round(nSystem / nTotalCpu * 100 * 100) / 100,\r\n                    nIdleCpuUsage = Math.round(nIdle / nTotalCpu * 100 * 100) / 100;\r\n                    //console.log('nUser : ' + nUser + ', nSystem : ' + nSystem + ', nNice : ' + nNice + ', nIdle : ' + nIdle);\r\n                \r\n                var nFreeMemory = Math.round(os.freemem()/1000000 * 100) / 100,\r\n                    nUsedMemory = Math.round((os.totalmem() - os.freemem()) / 1000000 * 100) / 100,\r\n                    nTotalMemory = Math.round(os.totalmem()/1000000 * 100) / 100,\r\n                    nMemoryUsage = Math.round((os.totalmem() - os.freemem()) / os.totalmem() * 100 * 100) / 100;\r\n                \r\n                oSocket.emit('pushMonitoringData', {\r\n                    nFreeMemory : nFreeMemory, // MB\r\n                    nUsedMemory : nUsedMemory,\r\n                    nTotalMemory : nTotalMemory,\r\n                    nMemoryUsage : nMemoryUsage,    \r\n                    nUserCpuUsage : nUserCpuUsage,\r\n                    nSystemCpuUsage : nSystemCpuUsage,\r\n                    nIdleCpuUsage : nIdleCpuUsage,\r\n                    nLoadAverage : os.loadavg()[0]\r\n                });\r\n            });\r\n        }, 1000);  \r\n    });\r\n}\r\n\r\nfunction getServerInfo(){\r\n    var info = {};\r\n    try { info['Hostname'] = os.hostname() } catch(err) { console.error(err) } \r\n    try { info['OS type'] = os.type() } catch(err) { console.error(err) } \r\n    try { info['Platform'] = os.platform() } catch(err) { console.error(err) } \r\n    try { info['Total memory (MB)'] = os.totalmem() / 1000000 } catch(err) { console.error(err) } \r\n    try { var cpus = os.cpus(); info['CPU'] = {architecture: os.arch(), model: cpus[0].model, speed: cpus[0].speed, cores: cpus.length} } catch(err) { console.error(err) } \r\n    try { info['Interfaces'] = os.networkInterfaces() } catch(err) { console.error(err) } \r\n    try { info['OS uptime (Hours)'] = Math.floor(os.uptime() / 3600) } catch(err) { console.error(err) } \r\n    try { info['Node arguments'] = process.argv } catch(err) { console.error(err) } \r\n    try { info['Node PID'] = process.pid; } catch(err) { console.error(err) } \r\n    try { info['Node uptime (Hours)'] = Math.floor(process.uptime() / 3600); } catch(err) { console.error(err) } \r\n    try { info['Node versions'] = process.versions } catch(err) { console.error(err) } \r\n    return info;\r\n}\r\n\r\n\r\nfunction readStat(fCallback){\r\n    Exec('sar 1 1', function(err, stdout, stderr){\r\n        fCallback(stdout.toString());\r\n        if(err){\r\n            console.error(err);\r\n        }\r\n        if(stderr){\r\n            console.error(stderr);\r\n        }\r\n    });\r\n}"]],"start1":0,"start2":0,"length1":122,"length2":4709}]],"length":4709,"saved":false}
{"contributors":[],"silentsave":false,"ts":1354604315166,"patch":[[{"diffs":[[0,"')\r\n"],[-1,"  , user = require('./routes/user')\r\n"],[0,"  , "]],"start1":99,"start2":99,"length1":45,"length2":8}]],"length":4672,"saved":false}
{"ts":1354604467600,"patch":[[{"diffs":[[0,"       }\r\n    });\r\n}"],[1,"\r\n\r\nlisten(process.env.PORT);"]],"start1":4652,"start2":4652,"length1":20,"length2":49}]],"length":4701,"saved":false}
{"ts":1354604479392,"patch":[[{"diffs":[[0,";\r\n}\r\n\r\n"],[1,"exports."],[0,"listen(p"]],"start1":4668,"start2":4668,"length1":16,"length2":24}]],"length":4709,"saved":false}
{"ts":1354604704110,"patch":[[{"diffs":[[0,"ess.env."],[1,"C9_"],[0,"PORT);"]],"start1":4695,"start2":4695,"length1":14,"length2":17}]],"length":4712,"saved":false}
{"ts":1354605145636,"patch":[[{"diffs":[[0,"  });\r\n}\r\n\r\n"],[1,"//"],[0,"exports.list"]],"start1":4664,"start2":4664,"length1":24,"length2":26}]],"length":4714,"saved":false}
